// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider =  "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Users {
  user_id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String

  UserData UserDatas[]
  UserRole UserRoles[]
  Client Clients[]
  Task Tasks[]
  Note Notes[]
  ProjectAssignment ProjectAssignments[]
  TaskTime TaskTimes[]
  TaskAssignment TaskAssignments[]
}

model UserDatas {
  user_data_id Int @id @default(autoincrement())
  user_id Int @unique
  first_name String 
  second_name String
  employed_from DateTime
  employed_to DateTime?
  tel_number String
  address String
  contract String
  position_id Int

  Position CompanyPositions @relation(fields: [position_id],references: [position_id])
  User Users @relation(fields: [user_id],references: [user_id])
}

model CompanyPositions {
  position_id Int @id @default(autoincrement())
  name String @unique

  UserData UserDatas[]
}

model Modules {
  module_id Int @id @default(autoincrement())
  name String
  @@unique([name])
  
  Permission Permissions[]
}

model Roles {
  role_id Int @id @default(autoincrement())
  name String @unique

  Permission Permissions[]
  UserRole UserRoles[]
}

model UserRoles {
  user_role_id Int @id @default(autoincrement())
  user_id Int 
  role_id Int

  User Users @relation(fields: [user_id],references: [user_id])
  Role Roles @relation(fields: [role_id],references: [role_id])
}

model Permissions {
  permission_id Int @id @default(autoincrement())
  module_id Int
  role_id Int
  access Boolean @default(false)

  Module Modules @relation(fields: [module_id],references: [module_id])
  Role Roles @relation(fields: [role_id],references: [role_id])
}

enum clientTypeValues {
  Prywatny
  Firma
}

model Clients {
  client_id Int @id @default(autoincrement())
  status_id Int
  user_id Int
  client_type clientTypeValues @default(Prywatny)
  registration_date DateTime @default(now())
  first_name String
  second_name String
  regon String @default("brak") 
  nip String @default("brak") 
  krs String @default("brak") 
  company_name String @default("brak")
  address String
  
  Status Statuses @relation(fields: [status_id], references: [status_id])
  User Users @relation(fields: [user_id],references: [user_id])
  ClientNote ClientNotes[]
  ClientTask ClientTasks[]
  Invoice Invoices[]
  Project Projects[]
  ClientEmail ClientEmails[]
  ClientPhone ClientPhones[]
  ClientMeeting ClientMeetings[]
}

model ClientEmails {
  email_id    Int    @id @default(autoincrement())
  client_id   Int
  email       String
  Client      Clients @relation(fields: [client_id], references: [client_id])

  @@unique([email])
}

model ClientPhones {
  phone_id    Int    @id @default(autoincrement())
  client_id   Int
  tel_number  String
  Client      Clients @relation(fields: [client_id], references: [client_id])

  @@unique([tel_number])
}

enum statusTypeValues {
  Klient
  Projekt
  Zadanie
  Faktura
}

model Statuses {
  status_id Int @id @default(autoincrement())
  status_type statusTypeValues
  default Boolean @default(false)
  name String

  Client Clients[]
  Task Tasks[]
  Invoice Invoices[]
  Project Projects[]
}

model Notes {
  note_id Int @id @default(autoincrement())
  user_id Int
  note_name String @default("Brak")
  note_text String
  data_link String @default("Brak")
  created_at DateTime @default(now())

  ClientNote ClientNotes[]
  User Users @relation(fields: [user_id],references: [user_id])
}

model ClientNotes {
  client_note_id Int @id @default(autoincrement())
  client_id Int 
  note_id Int 

  Client Clients @relation(fields: [client_id],references: [client_id])
  Note Notes @relation(fields: [note_id],references: [note_id])
}

model Tasks {
  task_id Int             @id @default(autoincrement())
  status_id               Int
  user_id                 Int 
  task_name               String @default("brak")
  task_text               String  @default("brak")
  deadline                DateTime? 
  created_at DateTime     @default(now())
  predicted_time          Int?
  days_to_reminder_app    Int?  @default(4)
  days_to_reminder_email  Int?  @default(2)

  Status Statuses @relation(fields: [status_id], references: [status_id])
  User Users @relation(fields: [user_id],references: [user_id])
  ClientTask ClientTasks[]
  ProjectTask ProjectTasks[]
  TaskTime TaskTimes[]
}

model ClientTasks {
  client_task_id Int @id @default(autoincrement())
  client_id     Int
  task_id       Int

  Client Clients @relation(fields: [client_id],references: [client_id])
  Task Tasks @relation(fields: [task_id],references: [task_id])
}

model TaskTimes {
    task_time_id    Int @id @default(autoincrement())
    user_id         Int
    task_id         Int
    time_spent      Float
    day             DateTime
    added_at        DateTime  @default(now())
    comments        String    @default("brak")

    Task Tasks @relation(fields: [task_id],references: [task_id])
    User Users  @relation(fields: [user_id],references: [user_id])
}

model TaskAssignments {
    task_assignment_id      Int @id @default(autoincrement())
    task_project_id         Int
    user_id                 Int

    ProjectTask ProjectTasks @relation(fields: [task_project_id],references: [task_project_id])
    User Users  @relation(fields: [user_id],references: [user_id])
}

model Invoices {
  invoice_id Int  @id @default(autoincrement())
  year Int
  month Int
  invoice_number String        @unique 
  status_id Int
  invoice_type_id Int
  client_id Int
  issue_date     DateTime
  due_date       DateTime
  prize_netto Float
  prize_brutto Float
  tax_ammount Float
  comments String

  Status     Statuses     @relation(fields: [status_id], references: [status_id])
  InvoiceType InvoiceTypes @relation(fields: [invoice_type_id], references: [invoice_type_id])
  Client     Clients      @relation(fields: [client_id], references: [client_id])
  InvoiceProduct InvoiceProducts[]
}

model InvoiceProducts {
  invoice_product_id Int @id @default(autoincrement())
  invoice_id Int
  project_id Int 
  product_name String
  unit_price Float
  product_count Int
  prize Float
  tax Float

  Invoice Invoices @relation(fields:[invoice_id], references: [invoice_id])
  Project Projects @relation(fields:[project_id], references: [project_id])
}

model InvoiceTypes {
  invoice_type_id Int       @id @default(autoincrement())
  invoice_type              String
  numbering_format          numberingFormats  @default(FV_rok_miesiac_numer)    
  enabled                   Boolean
  current_number_sequence   Int
  template                  String


  Invoice Invoices[]
}

enum numberingFormats {
  FV_rok_miesiac_numer @map("FV/{rok}/{miesiac}/{numer}")
  FZ_rok_miesiac_numer @map("FZ/{rok}/{miesiac}/{numer}")
  FK_rok_miesiac_numer @map("FK/{rok}/{miesiac}/{numer}")
  PF_rok_miesiac_numer @map("PF/{rok}/{miesiac}/{numer}")
  FO_rok_miesiac_numer @map("FO/{rok}/{miesiac}/{numer}")
}

model CompanySettings {
  company_id Int @id @default(1)
  name String 
  address String
  regon String @default("brak") 
  nip String @default("brak") 
  krs String @default("brak")

  InvoicePaymentSetting InvoicePaymentSettings[]
  InvoiceSetting InvoiceSettings[]
}

enum currencyTypeValues {
  USD
  EUR
  PLN
}

model InvoiceSettings {
  invoice_setting_id        Int      @id @default(1)
  default_currency          currencyTypeValues
  payment_term              Int
  periodic_auto_generate    Boolean
  periodic_frequency        String
  email_notification  Boolean @default(true)
  sms_notification    Boolean @default(true)
  push_notification   Boolean @default(true)
  unpaid_reminder_enabled   Boolean
  reminder_frequency        Int
  reminder_content          String

  company_id                Int

  CompanySetting                CompanySettings @relation(fields: [company_id], references: [company_id])
}

model InvoicePaymentSettings {
  payment_setting_id Int     @id @default(autoincrement())
  advancement_rate   Int
  tax_rate           Int
  tax_type           String @default("brak")
  default_vat_amount Int
  company_id         Int

  CompanySetting CompanySettings @relation(fields: [company_id], references: [company_id])
}

model Projects {
  project_id  Int     @id @default(autoincrement())
  name        String
  client_id   Int
  status_id   Int
  description String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())

  Client Clients @relation(fields: [client_id], references: [client_id])
  Status Statuses @relation(fields: [status_id], references: [status_id])
  ProjectDoc ProjectDocs[]
  ProjectDetail ProjectDetails[]
  InvoiceProduct InvoiceProducts[]
  ProjectAssignment ProjectAssignments[]
  ProjectTask ProjectTasks[]
  Contract Contracts[]
  ProjectLink ProjectLinks[]
  ProjectMeeting ProjectMeetings[]
}

model ProjectAssignments {
  project_assignment_id Int     @id @default(autoincrement())
  project_id            Int
  user_id               Int

  Project Projects @relation(fields: [project_id], references: [project_id])
  User Users @relation(fields: [user_id], references: [user_id])
}

model ProjectDetails {
  project_detail_id Int @id @default(autoincrement())
  project_id        Int
  block_no_payment  Boolean @default(false)
  cost              Float
  deadline          DateTime
  advance_payment_percentage Float  @default(0)

  Project Projects @relation(fields: [project_id], references: [project_id])
}

enum LinkTypes {
  Figma
  Repository
  Documentation
  Signature
}

model ProjectLinks {
  link_id       Int @id @default(autoincrement())
  project_id    Int
  link_type     LinkTypes
  link          String
  name          String @default("brak")  

  Project Projects @relation(fields: [project_id], references: [project_id])
  ProjectDoc ProjectDocs[]
}

model ProjectDocs {
  project_doc_id    Int @id @default(autoincrement())
  project_id        Int
  file_name         String
  doc_description   String @default("brak")
  link_id           Int

  Project Projects @relation(fields: [project_id], references: [project_id])
  ProjectLink ProjectLinks @relation(fields: [link_id], references: [link_id])
}

model ProjectTasks {
  task_project_id     Int @id @default(autoincrement())
  project_id          Int
  task_id             Int

  Project Projects @relation(fields: [project_id], references: [project_id])
  Task Tasks @relation(fields: [task_id],references: [task_id])
  TaskAssignment TaskAssignments[]
}

model Meetings {
  meeting_id                  Int @id @default(autoincrement())
  date                        DateTime?       
  time_spent                  Float?
  meeting_description         String   @default("brak")
  meeting_outcomes            String   @default("brak")
  meeting_link                String   @default("brak")

  ProjectMeeting ProjectMeetings[]
  ClientMeeting ClientMeetings[]
}

model ClientMeetings {
  client_meeting_id Int @id @default(autoincrement())
  client_id           Int
  meeting_id          Int

  Meeting Meetings  @relation(fields: [meeting_id],references: [meeting_id])
  Client Clients @relation(fields: [client_id],references: [client_id])
}

model ProjectMeetings {
  project_meeting_id    Int @id @default(autoincrement())
  meeting_id            Int
  project_id            Int

  Meeting Meetings  @relation(fields: [meeting_id],references: [meeting_id])
  Project Projects @relation(fields: [project_id], references: [project_id])
}

model Contracts {
  contract_id Int @id @default(autoincrement())
  data_link String
  project_id  Int

  Project Projects @relation(fields: [project_id], references: [project_id])
}